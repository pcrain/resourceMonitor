#!/usr/bin/gnuplot -c
#Plotter for resource monitor output

TAIL         = 1                              #Whether to plot only the tail of the data
if (ARGC > 0) {
  POINTS     = ARG1                           #Print user specified number of points
  if (POINTS == 0) {
     TAIL    = 0                              #Print all of the data
  }
} else {
  POINTS    = 60*60                           #Print 3600 points of data by default
}

TIMEZONE     = -6                             #Clock shift for time zone (-6 = CST)
SCALE        = 16                             #Space between seconds on graph

INPUTFILE    = "~/.reslog.tsv"                #Input data location
OUTFILE      = "/tmp/reslog.png"              #Output image location
IMVIEWER     = "viewnior"                     #Image viewer used for viewing the data
MAXFANSPEED  = 6000                           #RPM
MAXDRAIN     = 10000                          #milliJoules
MAXPOWER     = 100                            #Watts
MAXTRANS     = 10**9                          #Bytes/sec
MAXPLOTWIDTH = 32767                          #Max size allowed by GNUPlot
PLOTHEIGHT   = 480                            #Height of the plot

GETSTART     = '`head -n1 '.INPUTFILE.' | cut -f 1`'  #First field is first time of logging
STARTTIME    = @GETSTART                              #Execute the command built above
TOFF         = STARTTIME+TIMEZONE*3600                #Time zone + start time offset for time axis

#Legend labels and line colors
t_ram    = "ram (%)";    c_ram    = "#BB00BB"     #RAM
t_temp   = "temp (C)";   c_temp   = "#FF5555"     #Temperature
t_fan    = "fan (RPS)";    c_fan    = "#8888FF"   #Fan
t_charge = "charge (%)"; c_charge = "#BBFF44"     #Battery Charge
t_drain  = "drain (dJ)";  c_drain  = "#0000FF"    #Battery Power Usage
t_down   = "down (bps)";   c_down   = "#44BBFF"   #Download
t_up     = "up (bps)";     c_up     = "#FFCC00"   #Upload
t_read   = "read (bps)";   c_read   = "#00FF00"   #Disk Reads
t_write  = "write (bps)";  c_write  = "#FF88BB"   #Disk Writes
t_power  = "power (W)";  c_power  = "#FFFF00"     #Power Usage
t_cpu    = "cpu (%)";    c_cpu    = "#FFFFFF"     #CPU Usage

reset
stats INPUTFILE using 1:3 name "a" nooutput   #Get file information loaded into memory
x_left = a_min_x+TOFF
x_right = a_max_x+TOFF
tickspan = 60
if (TAIL && (x_right-x_left)>POINTS) {
  x_left = x_right-POINTS
}
set xrange [x_left:x_right]

plotwidth = (x_right-x_left)*SCALE  #Get width of time field
tickspan = plotwidth/100
if (tickspan < 60) {
  tickspan = 60
}
if (plotwidth > MAXPLOTWIDTH) {
  plotwidth = MAXPLOTWIDTH
}

set xtics x_left,tickspan,x_right #Set tick marks every minute
set terminal pngcairo dashed enhanced background rgb 'black' size plotwidth,PLOTHEIGHT #Set plot width to fit the data
set termoption dash
set output OUTFILE

set key tc rgb 'white'
set key samplen 2.5
set key width -2.5
# set key outside horizontal bottom left
set lmargin 30
set key at character 20,22

# set xlabel 'time' tc rgb 'white'
set ylabel 'usage (% / C / RPS / dJ / W)' tc rgb 'white'
set y2label 'transfer rate (bps)' tc rgb 'white'
set border lc rgb 'white'

set timefmt "%s"
set format x "%Y-%m-%d %H:%M:%S"
set xdata time

set border 14

set xtics rotate by 335 offset -0.0,-0.0
set xtics font ", 12"

set log y2
set yrange [0:105]
set y2range [1 : 10000000000.0*sqrt(10)]
set y2tics

normalize(value, min, max) = ( value > max ? 100 : 100 * (value - min) / (max - min) )
logtrans(value, min, max) = ( 100*(log10(value+1)-log10(min))/(log10(max)-log10(min)) )

set style line 1 lw 1
set style line 2 lw 2 dt '.'

# set label 1 "Generate plot labels from first row in each column"
# set label 1 at graph 0.02, 0.85 tc lt 3
# set label 2 "Generate x-axis labels from first column in each row"
# set label 2 at graph 0.02, 0.80 tc lt 3

if (POINTS > 0) {  #Make sure we don't waste our time plotting extra data
  cmdbuild = '< tail -n '.POINTS.' '.INPUTFILE
} else {
  cmdbuild = INPUTFILE
}
plot cmdbuild u ($1+TOFF):2                               t t_ram    w lines ls 1 lc rgb c_ram, \
            "" u ($1+TOFF):3                               t t_temp   w lines ls 1 lc rgb c_temp, \
            "" u ($1+TOFF):(normalize($4, 0, MAXFANSPEED)) t t_fan    w lines ls 1 lc rgb c_fan, \
            "" u ($1+TOFF):5                               t t_charge w lines ls 1 lc rgb c_charge, \
            "" u ($1+TOFF):(normalize($6, 0, MAXDRAIN))    t t_drain  w lines ls 1 lc rgb c_drain, \
            "" u ($1+TOFF):($7)     axes x1y2              t t_down   w lines ls 2 lc rgb c_down, \
            "" u ($1+TOFF):($8)     axes x1y2              t t_up     w lines ls 2 lc rgb c_up, \
            "" u ($1+TOFF):($9)     axes x1y2              t t_read   w lines ls 2 lc rgb c_read, \
            "" u ($1+TOFF):($10)    axes x1y2              t t_write  w lines ls 2 lc rgb c_write, \
            "" u ($1+TOFF):(normalize($11, 0, MAXPOWER))   t t_power  w lines ls 1 lc rgb c_power, \
            "" u ($1+TOFF):12                              t t_cpu    w lines ls 1 lc rgb c_cpu
#

system(sprintf("%s %s 2>/dev/null &",IMVIEWER,OUTFILE))
